{"version":3,"sources":["util-math.js","App.js","serviceWorker.js","index.js"],"names":["τ","Math","PI","floor","abs","sin","cos","tan","sign","sqrt","pow","log","min","max","round","trunc","random","randomInt","max_1","randomRange","v","p","vF","arguments","length","undefined","Number","isInteger","parseFloat","toFixed","console","Date","StarryNight","props","canvasRef","useRef","useEffect","txtCvs","document","createElement","width","txtW","height","canvas","current","ctx","getContext","alpah","txt","alpha","randomHue","arr","stars","clearRect","i","beginPath","arc","fillStyle","concat","fill","createPattern","fillRect","react_default","a","Fragment","ref","rgba","r","g","b","op","NeonCircle","className","style","--ra","ra","--r","color","--g","--b","--op","--t","t","children","NeonColors","_ref","colors","_ref$dr","dr","_ref$t","lns","forEach","c","push","App_NeonCircle","key","App","R","App_StarryNight","transform","App_NeonColors","rainbow","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1289f3d8.chunk.js","sourcesContent":["// Math definitions: Just for readability\n// https://github.com/d3/d3-geo/blob/master/src/math.js\n\n// consider degeneracy and robustness\n\nexport const τ    = Math.PI*2;\nexport const π    = Math.PI;\nexport const π_2  = Math.PI/2;\nexport const π_4  = Math.PI/4;\nexport const ε    = 1e-6;      // a small threshold value for the floating point computation\nexport const ε2   = 1e-12;\n\nexport const deg360 = 360;         // declare the special degree as the constant, name it.\nexport const deg180 = 180;\nexport const deg90  = 90;\nexport const degrees = deg180 / π;\nexport const radians = π / deg180;\nexport const π_2xdegrees = deg90;  // π/2 x degrees\nexport const abs   = Math.abs;\nexport const sin   = Math.sin;\nexport const cos   = Math.cos;\nexport const tan   = Math.tan;\nexport const sign  = Math.sign;\nexport const sqrt  = Math.sqrt;\nexport const pow   = Math.pow;\nexport const log   = Math.log;\n\nexport const min   = Math.min;\nexport const max   = Math.max;\nexport const round = Math.round;\nexport const trunc = Math.trunc;\nexport const floor = Math.floor;\nexport const random = Math.random;  // range [0, 1) never returns 1\n\nexport const randomInt   = max_1 => floor( random() * max_1 );  // range [0, max-1]\nexport const randomRange = (min, v, p) => vF( min + v * random(), p );\nexport const randomElement = arr => arr[floor( random()*arr.length )];\n\nexport const vF = (v, p=3) => Number.isInteger(v) ? v : parseFloat(v.toFixed(p));  // fixed digit number with precision=p\n\nexport const zero    = v => abs(v) < ε;        // is virtually zero?\nexport const epsilon = v => zero(v) ? 0 : v;   // reduce an infinitesimal number to zero\n\n// to avoid NaN for the invalid domain ranges\nexport const asin = x => x > 1 ? π/2 : x < -1  ? -π/2 : Math.asin(x);\nexport const acos = x => x > 1 ? 0   : x < -1  ? π    : Math.acos(x);\n\n// https://en.wikipedia.org/wiki/Haversine_formula\nexport const haversin = x => (x = sin(x/2))*x;\nexport const range = (x, r1, r2) => min(max(x, r1), r2);  // let r1 ≦ x ≦ r2\n\n","import React, { useRef, useEffect } from 'react';\nimport {\n  randomRange, randomInt, randomElement, τ\n} from './util-math';\nimport './App.scss';\n\n(function() { // ASCII ART: http://patorjk.com/software/taag/#p=display&f=Graffiti&t=Type%20Something%20\n  console.log(\"╔═╗┌─┐┌─┐┌─┐┌─┐┌┬┐┬┌┬┐┌─┐╔═╗  Logo v0.1 - contact: dev.spacetimeq@gmail.com\");\n  console.log(\"╚═╗├─┘├─┤│  ├┤  │ ││││├┤ ║═╬╗\", Date());\n  console.log(\"╚═╝┴  ┴ ┴└─┘└─┘ ┴ ┴┴ ┴└─┘╚═╝╚ (C)2019 SpacetimeQ Inc, CA 94583\");\n})();  // IIFE\n\n// Actually, we don't have to regenerate the pattern for each screen resize.\n// If we can save the result, just repaint with the same pattern for the new screen.\nconst StarryNight = props => {\n  const canvasRef = useRef(null);\n  const txtW = 301;\n\n  useEffect(() => {\n    const txtCvs = document.createElement('canvas');  // texture buffer canvas, offscreen\n    txtCvs.width  = txtW - 1;\n    txtCvs.height = txtW - 1;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d', { alpah: false });\n    const txt = txtCvs.getContext('2d', { alpha: false });  // no transparent, to optimize rendering\n\n    const randomHue = () => randomElement( [0, 30, 60, 90, 120, 180, 240] );  // colors\n    const stars = 300 + randomInt( 200 );\n\n    txt.clearRect(0, 0, txtCvs.width, txtCvs.height);  // Otherwise the pattern will be accumulated\n    for (let i=0; i < stars; i++) {\n      txt.beginPath();\n      txt.arc(randomInt( txtW ), randomInt( txtW ), randomRange(.1, .9, 2), 0, τ);\n      txt.fillStyle = `hsla(${randomHue()},${50 + randomInt( 50 )}%,88%,${randomRange(.4, 1-.4, 2)})`;\n      txt.fill();  // fill() was faster than stroke()\n    }\n    ctx.fillStyle = ctx.createPattern(txtCvs, 'repeat');  // create pattern from txtCvs canvas in ctx\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    //console.log(stars, \"stars generated: \",\n    //  Math.floor( stars * props.width * props.height / ( (txtW-1) * (txtW-1) ) ), \"in total\");\n  }, [props.width, props.height]);  // only when size changes\n\n  return (\n    <>\n      <canvas ref={canvasRef} width={props.width} height={props.height} />\n    </>\n  );\n}\n  /*\nconst StarryNight = props => {\n  const txtCvsRef = useRef(null);  // texture canvas reference, offscreen canvas\n  const canvasRef = useRef(null);\n  const txtW = 301;\n\n  useEffect(() => {\n    const txtCvs = txtCvsRef.current;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const txt = txtCvs.getContext('2d', { alpha: false });  // no transparent, to optimize rendering\n\n    const randomHue = () => randomElement( [0, 30, 60, 90, 120, 180, 240] );  // colors\n    const stars = 300 + randomInt( 200 );\n\n    txt.clearRect(0, 0, txtCvs.width, txtCvs.height);  // Otherwise the pattern will be accumulated\n    for (let i=0; i < stars; i++) {\n      txt.beginPath();\n      txt.arc(randomInt( txtW ), randomInt( txtW ), randomRange(.1, .8, 2), 0, τ);\n      txt.fillStyle = `hsla(${randomHue()},${50 + randomInt( 50 )}%,88%,${randomRange(.4, 1-.4, 2)})`;\n      txt.fill();  // fill() was faster than stroke()\n    }\n    ctx.fillStyle = ctx.createPattern(txtCvs, 'repeat');  // create pattern from txtCvs canvas in ctx\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    //console.log(stars, \"stars generated: \",\n    //  Math.floor( stars * props.width * props.height / ( (txtW-1) * (txtW-1) ) ), \"in total\");\n  }, [props.width, props.height]);  // only when size changes\n\n  return (\n    <>\n      <canvas ref={txtCvsRef} width={txtW-1} height={txtW-1} style={{ visibility: 'hidden' }} />\n      <canvas ref={canvasRef} width={props.width} height={props.height} />\n    </>\n  );\n}\n*/\n\nconst rgba = (r, g, b, op=1) => ({r: r, g: g, b: b, op: op});\n\nconst NeonCircle = props =>\n  <div className=\"ca\"\n    style={{\n      '--ra': props.ra + 'px',\n      '--r' : props.color.r,\n      '--g' : props.color.g,\n      '--b' : props.color.b,\n      '--op': props.color.op,\n      '--t' : props.t + 's'\n    }}\n  >\n    {props.children}\n  </div>;\n\nconst NeonColors = ({colors, ra, dr=12, t=0}) => {\n  const lns = [];\n  colors.forEach((c, i) =>\n    lns.push( <NeonCircle key={i} ra={ra + dr*i} color={c} t={t + i} ></NeonCircle>));\n\n  return ( <> {lns} </>);\n}\n\n/*\nconst Demo = () =>\n  <>\n    <NeonCircle ra={10}  color={rgb(255, 0, 0)}   t={0} />\n    <NeonCircle ra={100} color={rgb(255, 0, 255)} t={2} />\n    <NeonCircle ra={150} color={rgb(0,   0, 255)} t={5} />\n    <NeonCircle ra={250} color={rgb(178, 34, 34)} t={10} />\n  </>;\n*/\n\nfunction App() {\n  const rainbow = op => [  // Roy G. Biv\n    rgba(148,0,  211,op), // Violet\n    rgba(75, 0,  130,op), // Indigo\n    rgba(0,  0,  255,op), // Blue\n    rgba(0,  255,0,  op), // Green\n    rgba(255,255,0,  op), // Yellow\n    rgba(255,127,0,  op), // Orange\n    rgba(255,0,  0,  op), // Red\n  ];\n  const blues = op => [\n    rgba(0,  0,  128,op), // Navy\n    rgba(0,  0,  255,op), // Blue\n    rgba(255,0,  255,op), // Magenta\n    rgba(138,43, 226,op), // BlueViolet\n    rgba(135,206,235,op), // SkyBlue\n    rgba(65, 105,225,op), // RoyalBlue\n    rgba(0,  0,  205,op), // MediumBlue\n  ];\n\n  const R = 100;\n  \n  return (\n    <div className=\"App\">\n      <StarryNight width={1000} height={1000} />\n      <div className=\"ctxt\"\n        style={{'--ra': R + 'px'}}\n      >\n        <div style={{transform: `translateY(${R-20}px)`}}>\n          <span className=\"stq\">SpacetimeQ</span>\n          <br/>\n          <span className=\"s3d\">Symbolic<span className=\"tail\">3D</span></span>\n        </div>\n      </div>\n      <NeonColors colors={blues(1)}    ra={R + 20} dr={0} t={5} />\n      <NeonColors colors={rainbow(.3)} ra={R + 50} dr={0} t={60} />\n    </div>\n  );\n}\n\n/*\n*/\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}