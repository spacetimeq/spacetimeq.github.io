{"version":3,"sources":["util-ui.js","util-math.js","App.js","serviceWorker.js","index.js"],"names":["useWindowSize","_useState3","useState","w","window","innerWidth","h","innerHeight","_useState4","Object","slicedToArray","winSize","setWinSize","handleWindowResize","useEffect","addEventListener","removeEventListener","τ","Math","PI","floor","abs","sin","cos","tan","sign","sqrt","pow","log","min","max","round","trunc","random","randomInt","max_1","randomRange","v","p","vF","arguments","length","undefined","Number","isInteger","parseFloat","toFixed","console","Date","StarryNight","props","canvasRef","useRef","txtCvsRef","document","createElement","txtCvs","current","width","txtW","height","txt","getContext","alpha","randomHue","arr","stars","clearRect","i","beginPath","arc","fillStyle","concat","fill","canvas","ctx","alpah","createPattern","fillRect","react_default","a","ref","NeonCircle","className","style","--ra","ra","--cl","color","--t","t","children","NeonColors","_ref","colors","_ref$dr","dr","_ref$t","lns","forEach","c","push","App_NeonCircle","key","Fragment","App","op","ws","blues","isSafari","ua","navigator","userAgent","toLowerCase","indexOf","detectBrowser","R","App_StarryNight","transform","App_NeonColors","slice","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a49671e5.chunk.js","sourcesContent":["// util-ui.js\nimport React, { useState, useEffect, useRef } from 'react';\n\n// reacts only to the width change\nexport const useWindowWidth = () => {\n  const [winWidth, setWinWidth] = useState(window.innerWidth);\n\n  const handleWindowResize = () => {\n    setWinWidth(window.innerWidth);\n  }\n\n  useEffect(() => {\n    window.addEventListener('resize', handleWindowResize);\n    return () => window.removeEventListener('resize', handleWindowResize);\n  }, []);\n\n  return winWidth;\n}\n\n// reacts to both width and height changes\n// aspect ration = w / h; Portrait (asp <= 1) Landscape (asp > 1)\nexport const useWindowSize = () => {\n  const [winSize, setWinSize] = useState({\n    w: window.innerWidth,\n    h: window.innerHeight\n  });\n\n  const handleWindowResize = () => setWinSize({\n    w: window.innerWidth,\n    h: window.innerHeight\n  });\n\n  useEffect(() => {\n    window.addEventListener('resize', handleWindowResize);\n    return () => window.removeEventListener('resize', handleWindowResize);\n  }, []);\n\n  return winSize;\n}\n/*\n// Usage\nfunction App() {\n  // Call our hook for each key that we'd like to monitor\n  const happyPress = useKeyPress('h');\n  const sadPress = useKeyPress('s');\n  const robotPress = useKeyPress('r');\n  const foxPress = useKeyPress('f');\n\n  return (\n    <div>\n      <div>h, s, r, f</div>\n      <div>\n        {happyPress && '😊'}\n        {sadPress && '😢'}\n        {robotPress && '🤖'}\n        {foxPress && '🦊'}\n      </div>\n    </div>\n  );\n}\n*/\n\n// Hook\n// left, up, right, down = 37, 38, 39, 40\nexport function useKeyPress(targetKey) {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  // If pressed key is our target key then set to true\n  function downHandler({ key }) {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  }\n\n  // If released key is our target key then set to false\n  const upHandler = ({ key }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  };\n\n  // Add event listeners\n  useEffect(() => {\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n}\n\n// Mouse / TrackPad Event Handlers Wrapper\n// props.render should be provided, that handles changed x, y position\nexport const EventMove = props => {\n  const [mousedown,  setMouseDown] = useState(false);\n  const [mouse,      setMouse]     = useState({x: 0, y: 0});\n\n  const _moveStart = ev => {\n    const p = (ev.type === 'touchstart') ?\n      {x: ev.touches[0].pageX,\n       y: ev.touches[0].pageY} :\n      {x: ev.clientX,\n       y: ev.clientY};\n    setMouseDown(true);\n    setMouse(p);\n  }\n\n  const _move = ev => {\n    if (mousedown) {\n      const p = (ev.type === 'touchmove') ?\n        {x: ev.touches[0].pageX,\n         y: ev.touches[0].pageY} :\n        {x: ev.clientX,\n         y: ev.clientY};\n      props.render(p.x - mouse.x, p.y - mouse.y);  // Render Props\n      setMouse(p);\n    }\n  }\n\n  const _moveEnd = () => { setMouseDown(false); }\n    \n  const handleMouseDown = ev => { _moveStart(ev); }\n  const handleMouseMove = ev => { _move(ev); }\n  const handleMouseUp   = ev => { _moveEnd(); }\n\n  const handleTouchStart = ev => {\n    ev.preventDefault();\n    ev.stopPropagation();\n    _moveStart(ev);\n  }\n\n  const handleTouchMove = ev => {\n    ev.preventDefault();\n    ev.stopPropagation();  // seems not working\n    ev.nativeEvent.stopImmediatePropagation();\n    _move(ev);\n  }\n  const handleTouchEnd = () => {\n    _moveEnd();\n  }\n\n  return (\n    <div\n      onMouseUp    = {handleMouseUp}\n      onMouseMove  = {handleMouseMove}\n      onMouseDown  = {handleMouseDown}\n      onTouchStart = {handleTouchStart}\n      onTouchMove  = {handleTouchMove}\n      onTouchEnd   = {handleTouchEnd}\n    >\n      {props.children}\n    </div>\n  );\n}\n\n// https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\n// 05/10/2019 by Soomin\n// Idle time CPU usage: 2% WTH?\nexport function useAnimationFrame(callback, delay) {\n  const savedCallback = useRef();\n  // const [lastTs, setLastTs] = useState(0);  // lastTs remained 0 in the tick loop even though setLastTs(ts) called.\n  const lastTs = useRef(0);  // returned object will persist for the full lifetime of the component\n\n  // Remember the latest callback\n  useEffect(() => {\n    //console.log(callback);\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval\n  useEffect(() => {\n    let frameId;\n\n    const tick = ts => {  // loop called repeatedly by rAF\n      if (ts - lastTs.current >= delay) {\n        //console.log(ts, lastTs.current, ts - lastTs.current);\n        lastTs.current = ts;\n        savedCallback.current();\n      }\n      frameId = requestAnimationFrame(tick);\n    }\n    tick(0);  // called once at the start\n    return () => cancelAnimationFrame(frameId);\n  }, [delay]);\n}\n","// Math definitions: Just for readability\n// https://github.com/d3/d3-geo/blob/master/src/math.js\n\n// consider degeneracy and robustness\n\nexport const τ    = Math.PI*2;\nexport const π    = Math.PI;\nexport const π_2  = Math.PI/2;\nexport const π_4  = Math.PI/4;\nexport const ε    = 1e-6;      // a small threshold value for the floating point computation\nexport const ε2   = 1e-12;\n\nexport const deg360 = 360;         // declare the special degree as the constant, name it.\nexport const deg180 = 180;\nexport const deg90  = 90;\nexport const degrees = deg180 / π;\nexport const radians = π / deg180;\nexport const π_2xdegrees = deg90;  // π/2 x degrees\nexport const abs   = Math.abs;\nexport const sin   = Math.sin;\nexport const cos   = Math.cos;\nexport const tan   = Math.tan;\nexport const sign  = Math.sign;\nexport const sqrt  = Math.sqrt;\nexport const pow   = Math.pow;\nexport const log   = Math.log;\n\nexport const min   = Math.min;\nexport const max   = Math.max;\nexport const round = Math.round;\nexport const trunc = Math.trunc;\nexport const floor = Math.floor;\nexport const random = Math.random;  // range [0, 1) never returns 1\n\nexport const randomInt   = max_1 => floor( random() * max_1 );  // range [0, max-1]\nexport const randomRange = (min, v, p) => vF( min + v * random(), p );\nexport const randomElement = arr => arr[floor( random()*arr.length )];\n\nexport const vF = (v, p=3) => Number.isInteger(v) ? v : parseFloat(v.toFixed(p));  // fixed digit number with precision=p\n\nexport const zero    = v => abs(v) < ε;        // is virtually zero?\nexport const epsilon = v => zero(v) ? 0 : v;   // reduce an infinitesimal number to zero\n\n// to avoid NaN for the invalid domain ranges\nexport const asin = x => x > 1 ? π/2 : x < -1  ? -π/2 : Math.asin(x);\nexport const acos = x => x > 1 ? 0   : x < -1  ? π    : Math.acos(x);\n\n// https://en.wikipedia.org/wiki/Haversine_formula\nexport const haversin = x => (x = sin(x/2))*x;\nexport const range = (x, r1, r2) => min(max(x, r1), r2);  // let r1 ≦ x ≦ r2\n\n","import React, { useRef, useEffect } from 'react';\nimport { useWindowSize } from './util-ui';\nimport {\n  randomRange, randomInt, randomElement, τ\n} from './util-math';\nimport './App.scss';\n\n(function() { // ASCII ART: http://patorjk.com/software/taag/#p=display&f=Graffiti&t=Type%20Something%20\n  console.log(\"╔═╗┌─┐┌─┐┌─┐┌─┐┌┬┐┬┌┬┐┌─┐╔═╗  Logo v0.1 - contact: dev.spacetimeq@gmail.com\");\n  console.log(\"╚═╗├─┘├─┤│  ├┤  │ ││││├┤ ║═╬╗\", Date());\n  console.log(\"╚═╝┴  ┴ ┴└─┘└─┘ ┴ ┴┴ ┴└─┘╚═╝╚ (C)2019 SpacetimeQ Inc, CA 94583\");\n})();  // IIFE\n\n// Actually, we don't have to regenerate the pattern for each screen resize.\n// If we can save the result, just repaint with the same pattern for the new screen.\nconst StarryNight = props => {\n  const canvasRef = useRef(null);\n  const txtCvsRef = useRef(document.createElement('canvas'));\n  const txtW = 301;\n\n  useEffect(() => {\n    const txtCvs = txtCvsRef.current;  // texture buffer canvas, offscreen\n    txtCvs.width  = txtW - 1;\n    txtCvs.height = txtW - 1;\n    const txt = txtCvs.getContext('2d', { alpha: false });  // no transparent, to optimize rendering\n\n    const randomHue = () => randomElement( [0, 30, 60, 90, 120, 180, 240] );  // colors\n    const stars = 300 + randomInt( 200 );\n\n    txt.clearRect(0, 0, txtCvs.width, txtCvs.height);  // Otherwise the pattern will be accumulated\n    for (let i=0; i < stars; i++) {\n      txt.beginPath();\n      txt.arc(randomInt( txtW ), randomInt( txtW ), randomRange(.1, .9, 2), 0, τ);\n      txt.fillStyle = `hsla(${randomHue()},${50 + randomInt( 50 )}%,88%,${randomRange(.4, 1-.4, 2)})`;\n      txt.fill();  // fill() was faster than stroke()\n    }\n    console.log(`${stars} stars generated in ${txtW-1}x${txtW-1} pattern.`);\n  }, []); // initialize only once\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d', { alpah: false });\n    ctx.fillStyle = ctx.createPattern(txtCvsRef.current, 'repeat');  // create pattern from txtCvs canvas in ctx\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n  }, [props.width, props.height]);  // only when size changes\n\n  return (\n    <canvas ref={canvasRef} width={props.width} height={props.height} />\n  );\n}\n\nconst NeonCircle = props =>\n  <div className=\"ca\"\n    style={{\n      '--ra': props.ra + 'px',\n      '--cl': props.color,\n      '--t' : props.t + 's'\n    }}\n  >\n    {props.children}\n  </div>;\n\nconst NeonColors = ({colors, ra, dr=12, t=0}) => {\n  const lns = [];\n  colors.forEach((c, i) =>\n    lns.push( <NeonCircle key={i} ra={ra + dr*i} color={c} t={t + i} ></NeonCircle>));\n\n  return ( <> {lns} </>);\n}\n\n/*\nconst Demo = () =>\n  <>\n    <NeonCircle ra={10}  color={rgb(255, 0, 0)}   t={0} />\n    <NeonCircle ra={100} color={rgb(255, 0, 255)} t={2} />\n    <NeonCircle ra={150} color={rgb(0,   0, 255)} t={5} />\n    <NeonCircle ra={250} color={rgb(178, 34, 34)} t={10} />\n  </>;\n*/\n\nfunction App() {\n  const ws = useWindowSize();\n  const rainbow = op => [  // Roy G. Biv\n    `rgba(148,0,  211,${op})`, // Violet\n    `rgba(75, 0,  130,${op})`, // Indigo\n    `rgba(0,  0,  255,${op})`, // Blue\n    `rgba(0,  255,0,  ${op})`, // Green\n    `rgba(255,255,0,  ${op})`, // Yellow\n    `rgba(255,127,0,  ${op})`, // Orange\n    `rgba(255,0,  0,  ${op})`, // Red\n  ];\n  const blues = op => [\n    `rgba(0,  0,  128,${op})`, // Navy\n    `rgba(0,  0,  255,${op})`, // Blue\n    `rgba(255,0,  255,${op})`, // Magenta\n    `rgba(138,43, 226,${op})`, // BlueViolet\n    `rgba(135,206,235,${op})`, // SkyBlue\n    `rgba(65, 105,225,${op})`, // RoyalBlue\n    `rgba(0,  0,  205,${op})`, // MediumBlue\n  ];\n\n  // 0: Chrome, 1: Safari, 2: Firefox\n  const detectBrowser = () => {\n    const ua = navigator.userAgent.toLowerCase();\n    if (ua.indexOf('safari') !== -1)\n      return (ua.indexOf('chrome') > -1) ? 0 : 1;\n    if (ua.indexOf('firefox'))\n      return 2;\n    return -1;\n  }\n\n  // Safari does not show correctly overlapped circles.\n  const isSafari = detectBrowser() === 1;\n  const R  = 100;\n  \n  return (\n    <div className=\"App\">\n      <StarryNight width={ws.w} height={ws.h} />\n      <div className=\"ctxt\"\n        style={{'--ra': R + 'px'}}\n      >\n        <div style={{transform: `translateY(${R-20}px)`}}>\n          <span className=\"stq\">SpacetimeQ</span>\n          <br/>\n          <span className=\"s3d\">Symbolic<span className=\"tail\">3D</span></span>\n        </div>\n      </div>\n      <NeonColors colors={isSafari ? blues(1).slice(0, 1) : blues(1)} ra={R + 20} dr={0} t={5} />\n      <NeonColors colors={rainbow(.3)} ra={R + 60} dr={isSafari ? 10 : 0} t={60} />\n    </div>\n  );\n}\n\n/*\n*/\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}