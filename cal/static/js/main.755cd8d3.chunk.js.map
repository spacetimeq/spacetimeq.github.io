{"version":3,"sources":["util-cal.js","util-math.js","App.js","serviceWorker.js","index.js"],"names":["IsLeapYear","Math","PI","abs","sin","cos","tan","sign","sqrt","pow","log","min","max","round","trunc","floor","random","y","DaysInMonth","m","GengoYear","yr","i","Names","Gengo","length","diff","jp","locale","Month","_ref","name","_ref$bFill","bFill","N","dow","Date","getDay","lns","Week","forEach","w","push","react_default","a","createElement","key","prevN","j","className","d","k","role","aria-label","App","getFullYear","nm","App_Month","window","innerWidth","innerHeight","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.755cd8d3.chunk.js","sourcesContent":["// SpacetimeQ CalUtil, by Soomin K.\n//\n// [JavaScript Dates](https://flaviocopes.com/javascript-dates/)\n\nimport Names from './names.json';\nimport { deg360, radians, sin, cos } from './util-math';\n\n// Check if the given year is a leap year in the Gregorian calendar\nexport const IsLeapYear = y =>\n  ((y % 4   === 0) &&\n   (y % 100 !== 0)) ||\n   (y % 400 === 0);\n\n// const DaysInMonth = (m, y) => new Date(y, m, 0).getDate();\n// m: 1..12\n// Gregorian Calendar: Sep. 1752 -> 1,2,14,...30 (11 days advanced)\nexport const DaysInMonth = (m, y) => {\n  if (y === 1752 && m === 9)\n    return 19;  // special case\n  switch (m) {\n    case 4:\n    case 6:\n    case 9:  \n    case 11: return 30;\n    case 2:  return IsLeapYear(y) ? 29 : 28;\n    default: return 31;\n  }\n}\n\n// Count the number of days with the year up to the specified date\n// m starts from 1\nexport const NthDayInYear = (yr, m, d) => {\n  // For the optimized performance, avoid the loop and use the pre-calculated array\n  // of accumulated days until the month (not a leap year)\n  const accDays = [\n    0,\n    31,\n    31+28,\n    31+28+31,\n    31+28+31+30,\n    31+28+31+30+31,\n    31+28+31+30+31+30,\n    31+28+31+30+31+30+31,\n    31+28+31+30+31+30+31+31,\n    31+28+31+30+31+30+31+31+30,\n    31+28+31+30+31+30+31+31+30+31,\n    31+28+31+30+31+30+31+31+30+31+30\n  // 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11 month\n  ];\n  if (m < 1 || m > 12)\n    return 0;  // valid range check\n  let days = accDays[m-1];\n  if (m > 2 && IsLeapYear(yr))\n    days++;\n  if (yr === 1752 && m >= 9 && d > 2) {\n    days -= (d < 14) ? (d - 2) : 11;\n  }\n  return (days + d);\n}\n\n// 元号 from 西暦\nexport const GengoYear = yr => {\n  for (let i = Names.Gengo.yr.length - 1; i >= 0; i--)\n    if (yr >= Names.Gengo.yr[i]) {\n      const diff = yr - Names.Gengo.yr[i];\n      return Names.Gengo.jp[i] + ( (diff > 0) ? diff : '元');\n    }\n  return yr;   // out of range, just return yr\n}\n\n// Period: 29.530589 (朔望月)\n// \n// get Julian Day Number\n// 上弦 6.6~8.2\n// 下弦 21.4~22.8\n// Invented in 1583 by Joseph Scaliger\n// The 7980 year cycle (solar, lunar, and a particular Roman tax cycle)\n// Jan.1,4713 B.C. at noon GMT ~ Jan.22,3268 at noon GMT\n// The number of days from Jan. 1, 4713 B.C. at 12:00:00 GMT, until Jan. 1, 1970 at 00:00:00 UTC\n// A day is 86,400 seconds long. UNIX TIM / 86400000 is the number of days since Jan. 1, 1970\n// new Date gives you the number of seconds from epoch until whatever loca ltime your computer has\nexport const getJulianDay = date => (date.getTime() / 86400000.0 + 2440587.5);\n\n// SOURCE: https://news.local-group.jp/moonage/moonage.js.txt\nexport const getMoonAge = date => getMoonAgeJD(getJulianDay(date));\n\nexport const getMoonAgeJD = jd => {\n  // 新月日計算\n  // 引数  　julian  ユリウス通日\n  // 戻り値  与えられたユリウス通日に対する直前の新月日(ユリウス日)\n  const getNewMoon = j => {\n    const n1 = 2451550.09765;\n    const n2 = 29.530589;\n    const n3 = 0.017453292519943;\n    const k  = Math.floor( (j - n1) / n2 );\n    const t  = k / 1236.85;\n\n    return (\n        n1\n      + n2 * k\n      + 0.0001337 * t * t\n      - 0.40720   * sin( (201.5643 + 385.8169 * k) * n3)\n      + 0.17241   * sin( (2.5534   +  29.1054 * k) * n3)\n    );\n  }\n  \n  let nm = getNewMoon(jd);\n  // getNewMoonは新月直前の日を与えるとうまく計算できないのでその対処\n  // (一日前の日付で再計算してみる)\n  if (nm > jd) {\n    nm = getNewMoon(jd - 1.0);\n  }\n  // console.log('Moon age:', jd - nm);\n  return (jd - nm);  // moon's age at current time\n}\n\n// normalize for any positive integer B (base), mapping to a non-negative integer that falls in [0, B]\n// ex) To keep degree in the range [0, 360], norm_B(-270, 360) = 90\nexport const normB = (v, B=deg360) =>   // norm_B(x, 360), norm_B(x, 24)\n  (v >= 0 && v <= B) ?  // best case: 2 compares, worst case: 3 compares + 2 (%,+) op\n    v :\n    (v >= 0) ?\n      v % B :\n      (v % B) + B;  // this cannot exceed B since (v % B) is negative\n// ( (v % B) + B ) % B;  // without comparisons version, 3 (%,+,%) operations for any cases\n\n// Position of the Sun: https://en.wikipedia.org/wiki/Position_of_the_Sun\n// Precision: compared to 国立天文台＞暦計算室＞暦象年表\n//   1.26 ~ 15.41 min (0.0106 degree) for 2019年二十四節気 視黄経 (Tested at Dec.6,2018)\n// Performance: 36.42ms/10,000runs, 78.0~167ms/100,000runs, 575.3ms/1M-runs (MacBook Pro, E 2013, 2.6GHz Intel Core i5)\n// Usage: const pos = getPosSun(new Date());\nexport const getPosSun = date => {\n  const j = getJulianDay( (date === undefined) ? new Date() : date ) - 2451545.0;\n  // The mean longitude of the Sun, corrected for the aberration of light\n  const L = 280.460 + 0.9856474 * j;  // in degree\n  // The mean anomaly of the Sun\n  const g = ( 357.528 + 0.9856003 * j ) * radians;  // in radian\n  const gx2 = g * 2;\n  // The ecliptic longitude of the Sun\n  return {\n    longitude: normB( L + 1.915 * sin(g) + 0.020   * sin(gx2) ),\n    distance: 1.00014 - 0.01671  * cos(g) - 0.00014 * cos(gx2)  // AU = 149597870700 m\n  };\n}\n","// Math definitions: Just for readability\n// https://github.com/d3/d3-geo/blob/master/src/math.js\n\n// consider degeneracy and robustness\n\nexport const τ    = Math.PI*2;\nexport const π    = Math.PI;\nexport const π_2  = Math.PI/2;\nexport const π_4  = Math.PI/4;\nexport const ε    = 1e-6;      // a small threshold value for the floating point computation\nexport const ε2   = 1e-12;\n\nexport const deg360 = 360;         // declare the special degree as the constant, name it.\nexport const deg180 = 180;\nexport const deg90  = 90;\nexport const degrees = deg180 / π;\nexport const radians = π / deg180;\nexport const π_2xdegrees = deg90;  // π/2 x degrees\nexport const abs   = Math.abs;\nexport const sin   = Math.sin;\nexport const cos   = Math.cos;\nexport const tan   = Math.tan;\nexport const sign  = Math.sign;\nexport const sqrt  = Math.sqrt;\nexport const pow   = Math.pow;\nexport const log   = Math.log;\n\nexport const min   = Math.min;\nexport const max   = Math.max;\nexport const round = Math.round;\nexport const trunc = Math.trunc;\nexport const floor = Math.floor;\nexport const random = Math.random;  // range [0, 1) never returns 1\n\nexport const randomInt   = max_1 => floor( random() * max_1 );  // range [0, max-1]\nexport const randomRange = (min, v, p) => vF( min + v * random(), p );\nexport const randomElement = arr => arr[floor( random()*arr.length )];\n\nexport const vF = (v, p=3) => Number.isInteger(v) ? v : parseFloat(v.toFixed(p));  // fixed digit number with precision=p\n\nexport const zero    = v => abs(v) < ε;        // is virtually zero?\nexport const epsilon = v => zero(v) ? 0 : v;   // reduce an infinitesimal number to zero\n\n// to avoid NaN for the invalid domain ranges\nexport const asin = x => x > 1 ? π/2 : x < -1  ? -π/2 : Math.asin(x);\nexport const acos = x => x > 1 ? 0   : x < -1  ? π    : Math.acos(x);\n\n// https://en.wikipedia.org/wiki/Haversine_formula\nexport const haversin = x => (x = sin(x/2))*x;\nexport const range = (x, r1, r2) => min(max(x, r1), r2);  // let r1 ≦ x ≦ r2\n\n","import React from 'react';\nimport './App.scss';\nimport Names from './names.json';\n//import { DaysInMonth, GengoYear, getJulianDay, getMoonAgeJD } from './util-cal';\nimport { DaysInMonth, GengoYear } from './util-cal';\n\nconst locale = \"jp\";  // en, jp, kr\n\nconst Month = ({yr, m, name, bFill=true}) => {\n  const N = DaysInMonth(m, yr);\n  const dow = (new Date(yr, m-1, 1)).getDay();  // Sun:0 ~ Sat:6\n  const lns = [];\n  Names.Week[locale].forEach( (w, i) => lns.push( <li key={i}>{w}</li> ));\n  const prevN = (m === 1) ? 31 : DaysInMonth(m-1, yr);\n  for (let j=1; j <= dow; j++)  // previous month\n    lns.push( <li key={10+j} className=\"m_pv\">{bFill ? (prevN - dow + j) : ''}</li> );\n\n  //let jd = getJulianDay(new Date(yr, m-1, 1, 21));\n  for (let d=1; d <= N; d++) {  // this month\n    //const ma = getMoonAgeJD(jd + d - 1);\n    lns.push( <li key={20+d}>{d}</li> );\n  }\n  if (bFill) {\n    for (let k=1; k <= (7*6 - dow - N); k++)  // next month\n      lns.push( <li key={60+k} className=\"m_nx\">{k}</li> );\n  }\n\n  return (\n    <section  className=\"mon\">\n      <header className=\"mon_h\">{name}</header>\n      <ol     className=\"mon_b\">{lns}</ol>\n      <footer className=\"mon_f\"><span role=\"img\" aria-label=\"moons\">🌕 🌗 🌑 🌓</span></footer>\n    </section>\n  );\n}\n\nfunction App() {\n  const yr=(new Date()).getFullYear();  // Check 1752\n  const lns = [];\n  Names.Month[locale].forEach( (nm, i) => lns.push( <Month key={i} yr={yr} m={i+1} name={nm} bFill={true} />))\n  return (\n    <div      className=\"App\">\n      <header className=\"cal_h\">{yr} {GengoYear(yr)}年 {window.innerWidth}x{window.innerHeight}</header>\n      <main   className=\"cal_b\">\n        {lns}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}